Para craear un nuevo proyecto en la terminal debemos colocar el comando:

npm create astro@latest

Luego de esto, nos pedirá que le indiquemos el nombre del proyecto, el cual puede ser el que queramos.

Ademas nos pedira que le indiquemos si usaremos algun template, si vamos a usar typescript, si queremos instalar dependencias (aqui le diremos que si siempre) y si queremos crear un nuevo repo en github.

Para "iniciar" o "Arrancar" el servidor debemos colocar en una consola el comando:

npm run dev

Esto nos mostrara en el puerto http://localhost:3000/ lo que se ha creado, asi como en Angular es el puerto http://localhost:4200

Estructura de un proyecto en Astro

.vscode

Carpeta que contiene la configuración de VSCode para el proyecto.

Aqui se encuentra el archivo launch.json, el cual contiene la configuración para poder debuggear el proyecto y el archivo extensions.json, el cual contiene las extensiones que se instalaron para el proyecto.

node_modules

Carpeta que contiene todas las dependencias del proyecto.

Aqui se encuentran todas las dependencias que se instalaron para el proyecto.

public

Carpeta que contiene los archivos estáticos del proyecto.

Aqui se encuentran los archivos estáticos del proyecto, como por ejemplo el favicon.ico, el index.html, el manifest.json, el robots.txt, etc.

src

Carpeta que contiene los archivos de código fuente del proyecto.

Aqui se encuentran los archivos de código fuente del proyecto, como por ejemplo los componentes, los servicios, los estilos, etc.

.gitignore

Archivo que contiene los archivos que no se deben subir al repositorio.

Aqui se encuentran los archivos que no se deben subir al repositorio, como por ejemplo los archivos de configuración de VSCode, los archivos de configuración de la terminal, los archivos de configuración de la carpeta node_modules, etc.

package-lock.json

Archivo que contiene la información de las dependencias del proyecto.

Astro.config.json

Archivo que contiene la configuración del proyecto.

Aqui se encuentra la configuración del proyecto, como por ejemplo el nombre del proyecto, la versión del proyecto, la descripción del proyecto, etc.

Igual aqui podemos configurar el proyecto para usar por ejemplo twillwindcss, React, etc.

package.json

Archivo que contiene la información del proyecto.

Aqui se encuentra la información del proyecto, como por ejemplo el nombre del proyecto, la versión del proyecto, la descripción del proyecto, etc.

Cuando al final de crear el proyecto usamos el comando:

npm run build

Esto nos creara una carpeta llamada dist, la cual contiene los archivos que se deben subir al servidor.

Con el comando:

npm run preview

Esto nos creara una carpeta llamada dist, la cual contiene los archivos que se deben subir al servidor.

tsconfig.json

Archivo que contiene la configuración de typescript.

Aqui se encuentra la configuración de typescript, como por ejemplo la versión de typescript, el modo de compilación, etc.

Astro Pages

Sabemos que una pagina normalmente no se compone de una sola pagina, sino que se compone de varias paginas, como por ejemplo la pagina de inicio, la pagina de contacto, la pagina de nosotros, etc.

Para crear una pagina en Astro, debemos crear un archivo .astro en la carpeta src/pages, el cual debe tener el mismo nombre que la ruta que queremos que tenga la pagina.

Por ejemplo, si queremos que la pagina de inicio tenga la ruta http://localhost:3000/, debemos crear un archivo llamado index.astro en la carpeta src/pages.

De la misma manera con npm run dev, podemos ver las paginas que hemos creado.

En las paginas que creamos, las . astro nos sirven para escribir codigo HTML primeramente, pero tambien podemos escribir codigo de javascript, typescript, etc.

Aunque de inicio podria incomodarnos poner el codigo CSS dentro de la pagina HTML, cuando se construye el proyecto con npm run build, se crea un archivo llamado global.css, el cual contiene todos los estilos que hemos escrito en las paginas.

Ahora con javascript igual se crea de la misma manera que el CSS, para que veamos pedazos solo en el area o el servidor de desarrollo, debemos colocar el codigo dentro de un tag script, osea:

---
codigo javascript
---

Asi solo se ejecutara ese codigo en el area de desarrollo y al construir el proyecto, ese codigo no se ejecutara.

Si por ejemplo se quiere usar codigo de Javascript en el area de desarrollo y en el area de produccion, debemos colocar el codigo dentro de un tag script, o en su caso colocarlo en la parte que manejaremos solo en desarrollo y consumirla en la parte que manejaremos en produccion. Esto se hace de la siguiente manera:

---
codigo javascript, coloquemos un arreglo de Strings
const hobbies = ["Programar", "Leer", "Jugar", "Dormir"];
---

Y ahora lo consumimos de la siguiente manera:

<h1>Mis Hobbies</h1>
<ul>
  {hobbies.map((hobbie) => (
    <li>{hobbie}</li>
  ))}
</ul>

De esta manera podemos usar codigo de Javascript en el area de desarrollo y en el area de produccion.

ESTE TIPO DE SINTAXIS ES LA QUE SE USA EN REACT, ANGULAR, ETC. y se llama JSX.

Data Fetching

Para hacer peticiones a una API, debemos usar el hook useFetch, el cual nos permite hacer peticiones a una API.

Para usar el hook useFetch, debemos importarlo de la siguiente manera:

import useFetch from "@astrojs/use-fetch";

Luego de esto, debemos crear una constante que contenga la url de la API, la cual debe ser una constante, osea:

const url = "https://jsonplaceholder.typicode.com/users";

Luego de esto, debemos crear una constante que contenga la respuesta de la API, la cual debe ser una constante, osea:

const { data, loading, error } = useFetch(url);

o usando await y async:

const response = await fetch(url);
const user = await response.json();

para verlo en el frontend, debemos usar la sintaxis de JSX, osea:

{user.map((user) => (
  <h1>{user.name}</h1>
  <p>{user.email}</p>
  <p>{user.phone}</p>
))}

Components